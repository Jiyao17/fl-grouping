
import numpy as np
import matplotlib.pyplot as plt

# secagg coefficiences: [ 0.01585284 -0.02719833  0.68493798]
# distance coefficiences: [ 0.00548707  0.0038231  -0.06900253]
# training coefficiences: [ 0.07093414 -0.00559966]

colors = [(0.12156862745098039, 0.4666666666666667, 0.7058823529411765), # blue
(1.0, 0.4980392156862745, 0.054901960784313725), # orange
(0.17254901960784313, 0.6274509803921569, 0.17254901960784313), # green
(0.8392156862745098, 0.15294117647058825, 0.1568627450980392), # red
(0.5803921568627451, 0.403921568627451, 0.7411764705882353), # purple
(0.5490196078431373, 0.33725490196078434, 0.29411764705882354), # brown
(0.8901960784313725, 0.4666666666666667, 0.7607843137254902), # pink
(0.4980392156862745, 0.4980392156862745, 0.4980392156862745), # gray
(0.7372549019607844, 0.7411764705882353, 0.13333333333333333), # yellow
(0.09019607843137255, 0.7450980392156863, 0.8117647058823529) # cyan
]

secagg_coefs = [ 0.01629675, -0.02373668,  0.55442565]
distance_coefs = [ 0.00548707,  0.0038231, -0.06900253]
training_coeffs = [ 0.07093414, -0.00559966]

sizes = range(5, 51, 5)
secagg_cost = [secagg_coefs[0]*size**2 + secagg_coefs[1]*size + secagg_coefs[2] for size in sizes]
distance_cost = [distance_coefs[0]*size**2 + distance_coefs[1]*size + distance_coefs[2] for size in sizes]
training_cost = [training_coeffs[0]*size + training_coeffs[1] for size in sizes]

# data0 = \
# "0.1438 0.1901 0.2118 0.2278 0.2457 0.2703 0.274 0.2891 0.2871 0.298 0.3028 0.311 0.3227 0.3217 0.3291 0.3232 0.3412 0.3281 0.3526 0.3576 0.3322 0.3518 0.3627 0.3368 0.3696 0.3693 0.3663 0.3715 0.3779 0.3824 0.3712 0.3849 0.3643 0.3826 0.3776 0.3798 0.3867 0.3807 0.3865 0.3803 0.3897 0.378 0.3897 0.3885 0.3686 0.3952 0.3787 0.4032 0.404 0.4071 0.4005 0.3947 0.3986 0.4018 0.395 0.392 0.3984 0.3986 0.4019 0.3907 0.398 0.392 0.3928 0.3953 0.3972 0.3918 0.3947 0.4008 0.3969 0.4003 0.3931 0.3935 0.395 0.3905 0.4042 0.3837 0.3959 0.3953 0.399 0.3945 0.3899 0.3931 0.4024 0.3988 0.4006 0.4005 0.3953 0.3907 0.3934 0.4031 0.3985 0.3928 0.3886 0.4025 0.3996 0.3932 0.3934 0.3943 0.4046 0.3939 "
# date1 = \
# "0.1791 0.1821 0.2065 0.2046 0.2309 0.25 0.2665 0.2292 0.284 0.3027 0.2966 0.2834 0.3046 0.3055 0.3063 0.3015 0.2951 0.3177 0.3234 0.3133 0.3098 0.332 0.3271 0.3295 0.3242 0.3515 0.3368 0.3367 0.3334 0.3494 0.3382 0.3284 0.3501 0.3353 0.342 0.3482 0.3548 0.3504 0.3509 0.3639 0.3514 0.3596 0.3592 0.3736 0.3676 0.3691 0.3512 0.3625 0.3633 0.3883 0.3885 0.3835 0.382 0.3836 0.3781 0.386 0.3803 0.3868 0.3874 0.3825 0.3863 0.3855 0.3893 0.3836 0.3893 0.3892 0.3921 0.3816 0.3839 0.3788 0.3818 0.388 0.3892 0.3905 0.3907 0.3889 0.3806 0.3896 0.3872 0.3943 0.3934 0.3874 0.3792 0.3911 0.3904 0.3923 0.3839 0.3949 0.3868 0.3659 0.3837 0.3931 0.3937 0.3819 0.3858 0.3865 0.382 0.3909 0.3891 0.3909 "

# y0 = np.array(data0.split(), dtype=np.float32)
# y1 = np.array(date1.split(), dtype=np.float32)

# x = np.arange(0, 100, 1)
plt.plot(sizes, secagg_cost, label='Secure Aggregation', color=colors[3])
plt.plot(sizes, distance_cost, label='Backdoor Detection', color=colors[0])
plt.plot(sizes, training_cost, label='Training', color=colors[2])
# plt.plot(y1, label='1')

plt.rc('font', size=20)
plt.subplots_adjust(0.16, 0.18, 0.96, 0.96)

plt.xlim(0, 50)
plt.ylim(0, 50)

plt.xlabel('Data/Group Size', fontsize=24)
plt.ylabel('Time', fontsize=24)
plt.xticks(fontsize=24)
plt.yticks(fontsize=24)
plt.grid(True)
plt.legend()

plt.savefig('overhead.pdf')
plt.savefig('overhead.png')
